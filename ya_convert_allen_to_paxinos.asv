function coordinates_bregma_mm = ya_convert_allen_to_paxinos(values_toConvert, allenOrBrainreg)
% values to convert: matrix of ML x AP x DV values to convert 
% allenOrBrainreg: string, either 'allen' or 'brainreg'

% (scaling "Toronto MRI transform", reflect AP/ML, convert 25/10um to 1mm)
if strcmp(allenOrBrainreg, 'allen')
    scale = [0.952, 1.031, 0.885] ./ 100; % [ML, AP, DV]
    bregma = [570, 540, 0]./100; % best estimate, [ML, AP, DV]
elseif  strcmp(allenOrBrainreg, 'brainreg')
    scale = [0.952, 1.031, 0.885] ./ 250; % [ML, AP, DV]
    bregma = [228, 216, 0]./ 250; % best estimate, [ML, AP, DV]
else
    error('unrecognized value format')
end

% Scale the coordinates
AP_scaled = values_toConvert(2) * scale(2);
ML_scaled = values_toConvert(1) * scale(1);
DV_scaled = values_toConvert(3) * scale(3);

% Tilt angle
theta_degrees = 15; % Tilt by 15 degrees - this is my best approximation
theta_radians = deg2rad(theta_degrees);

% Rotation matrix for tilting around ML axis
ap_rotation = 5; % tilt the CCF 5 degrees nose-up
ccf_rotation_tform = ...
    [1 0 0 0; ...
    0 cosd(ap_rotation) -sind(ap_rotation) 0; ...
    0 sind(ap_rotation) cosd(ap_rotation) 0; ...
    0 0 0 1];
R = [cos(theta_radians) 0 sin(theta_radians); 0 1 0; -sin(theta_radians) 0 cos(theta_radians)];

% Apply rotation to the scaled AP and DV (ignoring ML in rotation)
coordinates_scaled = [ML_scaled; AP_scaled; DV_scaled];
coordinates_rotated_scaled = R * coordinates_scaled;

% Adjusting values relative to bregma
coordinates_bregma_mm = coordinates_rotated_scaled'  - bregma;


end